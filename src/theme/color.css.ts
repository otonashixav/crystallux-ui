import {
  assignVars,
  createGlobalTheme,
  createTheme,
  createThemeContract,
  globalStyle,
} from "@vanilla-extract/css";
import { asRgbaVars } from "./utils";

export const colorVars = createThemeContract({
  ...asRgbaVars("primary", null),
  ...asRgbaVars("primaryContainer", null),
  ...asRgbaVars("secondary", null),
  ...asRgbaVars("secondaryContainer", null),
  ...asRgbaVars("tertiary", null),
  ...asRgbaVars("tertiaryContainer", null),
  ...asRgbaVars("surface", null),
  ...asRgbaVars("surfaceVariant", null),
  ...asRgbaVars("background", null),
  ...asRgbaVars("error", null),
  ...asRgbaVars("errorContainer", null),
  ...asRgbaVars("onPrimary", null),
  ...asRgbaVars("onPrimaryContainer", null),
  ...asRgbaVars("onSecondary", null),
  ...asRgbaVars("onSecondaryContainer", null),
  ...asRgbaVars("onTertiary", null),
  ...asRgbaVars("onTertiaryContainer", null),
  ...asRgbaVars("onSurface", null),
  ...asRgbaVars("onSurfaceVariant", null),
  ...asRgbaVars("onError", null),
  ...asRgbaVars("onErrorContainer", null),
  ...asRgbaVars("onBackground", null),
  ...asRgbaVars("outline", null),
  ...asRgbaVars("shadow", null),
  ...asRgbaVars("surfaceTint", null),
  ...asRgbaVars("inverseSurface", null),
  ...asRgbaVars("inverseOnSurface", null),
  ...asRgbaVars("inversePrimary", null),
});

export const lightVars = createThemeContract({
  ...asRgbaVars("lightPrimary", null),
  ...asRgbaVars("lightPrimaryContainer", null),
  ...asRgbaVars("lightSecondary", null),
  ...asRgbaVars("lightSecondaryContainer", null),
  ...asRgbaVars("lightTertiary", null),
  ...asRgbaVars("lightTertiaryContainer", null),
  ...asRgbaVars("lightSurface", null),
  ...asRgbaVars("lightSurfaceVariant", null),
  ...asRgbaVars("lightBackground", null),
  ...asRgbaVars("lightError", null),
  ...asRgbaVars("lightErrorContainer", null),
  ...asRgbaVars("lightOnPrimary", null),
  ...asRgbaVars("lightOnPrimaryContainer", null),
  ...asRgbaVars("lightOnSecondary", null),
  ...asRgbaVars("lightOnSecondaryContainer", null),
  ...asRgbaVars("lightOnTertiary", null),
  ...asRgbaVars("lightOnTertiaryContainer", null),
  ...asRgbaVars("lightOnSurface", null),
  ...asRgbaVars("lightOnSurfaceVariant", null),
  ...asRgbaVars("lightOnError", null),
  ...asRgbaVars("lightOnErrorContainer", null),
  ...asRgbaVars("lightOnBackground", null),
  ...asRgbaVars("lightOutline", null),
  ...asRgbaVars("lightShadow", null),
  ...asRgbaVars("lightSurfaceTint", null),
  ...asRgbaVars("lightInverseSurface", null),
  ...asRgbaVars("lightInverseOnSurface", null),
  ...asRgbaVars("lightInversePrimary", null),
});

export const darkVars = createThemeContract({
  ...asRgbaVars("darkPrimary", null),
  ...asRgbaVars("darkPrimaryContainer", null),
  ...asRgbaVars("darkSecondary", null),
  ...asRgbaVars("darkSecondaryContainer", null),
  ...asRgbaVars("darkTertiary", null),
  ...asRgbaVars("darkTertiaryContainer", null),
  ...asRgbaVars("darkSurface", null),
  ...asRgbaVars("darkSurfaceVariant", null),
  ...asRgbaVars("darkBackground", null),
  ...asRgbaVars("darkError", null),
  ...asRgbaVars("darkErrorContainer", null),
  ...asRgbaVars("darkOnPrimary", null),
  ...asRgbaVars("darkOnPrimaryContainer", null),
  ...asRgbaVars("darkOnSecondary", null),
  ...asRgbaVars("darkOnSecondaryContainer", null),
  ...asRgbaVars("darkOnTertiary", null),
  ...asRgbaVars("darkOnTertiaryContainer", null),
  ...asRgbaVars("darkOnSurface", null),
  ...asRgbaVars("darkOnSurfaceVariant", null),
  ...asRgbaVars("darkOnError", null),
  ...asRgbaVars("darkOnErrorContainer", null),
  ...asRgbaVars("darkOnBackground", null),
  ...asRgbaVars("darkOutline", null),
  ...asRgbaVars("darkShadow", null),
  ...asRgbaVars("darkSurfaceTint", null),
  ...asRgbaVars("darkInverseSurface", null),
  ...asRgbaVars("darkInverseOnSurface", null),
  ...asRgbaVars("darkInversePrimary", null),
});

createGlobalTheme(":root", lightVars, {
  ...asRgbaVars("lightPrimary", "#6750A4"),
  ...asRgbaVars("lightPrimaryContainer", "#EADDFF"),
  ...asRgbaVars("lightSecondary", "#625B71"),
  ...asRgbaVars("lightSecondaryContainer", "#E8DEF8"),
  ...asRgbaVars("lightTertiary", "#7D5260"),
  ...asRgbaVars("lightTertiaryContainer", "#FFD8E4"),
  ...asRgbaVars("lightSurface", "#FFFBFE"),
  ...asRgbaVars("lightSurfaceVariant", "#E7E0EC"),
  ...asRgbaVars("lightBackground", "#FFFBFE"),
  ...asRgbaVars("lightError", "#B3261E"),
  ...asRgbaVars("lightErrorContainer", "#F9DEDC"),
  ...asRgbaVars("lightOnPrimary", "#FFFFFF"),
  ...asRgbaVars("lightOnPrimaryContainer", "#21005E"),
  ...asRgbaVars("lightOnSecondary", "#FFFFFF"),
  ...asRgbaVars("lightOnSecondaryContainer", "#1E192B"),
  ...asRgbaVars("lightOnTertiary", "#FFFFFF"),
  ...asRgbaVars("lightOnTertiaryContainer", "#370B1E"),
  ...asRgbaVars("lightOnSurface", "#1C1B1F"),
  ...asRgbaVars("lightOnSurfaceVariant", "#49454E"),
  ...asRgbaVars("lightOnError", "#FFFFFF"),
  ...asRgbaVars("lightOnErrorContainer", "#370B1E"),
  ...asRgbaVars("lightOnBackground", "#1C1B1F"),
  ...asRgbaVars("lightOutline", "#79747E"),
  ...asRgbaVars("lightShadow", "#000000"),
  ...asRgbaVars("lightSurfaceTint", "#6750A4"),
  ...asRgbaVars("lightInverseSurface", lightVars, "lightPrimary"),
  ...asRgbaVars("lightInverseOnSurface", "#F4EFF4"),
  ...asRgbaVars("lightInversePrimary", "#D0BCFF"),
});

createGlobalTheme(":root", darkVars, {
  ...asRgbaVars("darkPrimary", "#D0BCFF"),
  ...asRgbaVars("darkPrimaryContainer", "#4F378B"),
  ...asRgbaVars("darkSecondary", "#CCC2DC"),
  ...asRgbaVars("darkSecondaryContainer", "#4A4458"),
  ...asRgbaVars("darkTertiary", "#EFB8C8"),
  ...asRgbaVars("darkTertiaryContainer", "#633B48"),
  ...asRgbaVars("darkSurface", "#1C1B1F"),
  ...asRgbaVars("darkSurfaceVariant", "#49454F"),
  ...asRgbaVars("darkBackground", "#1C1B1F"),
  ...asRgbaVars("darkError", "#F2B8B5"),
  ...asRgbaVars("darkErrorContainer", "#8C1D18"),
  ...asRgbaVars("darkOnPrimary", "#371E73"),
  ...asRgbaVars("darkOnPrimaryContainer", "#EADDFF"),
  ...asRgbaVars("darkOnSecondary", "#332D41"),
  ...asRgbaVars("darkOnSecondaryContainer", "#E8DEF8"),
  ...asRgbaVars("darkOnTertiary", "#492532"),
  ...asRgbaVars("darkOnTertiaryContainer", "#FFD8E4"),
  ...asRgbaVars("darkOnSurface", "#E6E1E5"),
  ...asRgbaVars("darkOnSurfaceVariant", "#CAC4D0"),
  ...asRgbaVars("darkOnError", "#601410"),
  ...asRgbaVars("darkOnErrorContainer", "#F9DEDC"),
  ...asRgbaVars("darkOnBackground", "#E6E1E5"),
  ...asRgbaVars("darkOutline", "#938F99"),
  ...asRgbaVars("darkShadow", "#000000"),
  ...asRgbaVars("darkSurfaceTint", darkVars, "darkPrimary"),
  ...asRgbaVars("darkInverseSurface", "#E6E1E5"),
  ...asRgbaVars("darkInverseOnSurface", "#313033"),
  ...asRgbaVars("darkInversePrimary", "#6750A4"),
});

const lightColorVars = {
  ...asRgbaVars("primary", lightVars, "lightPrimary"),
  ...asRgbaVars("primaryContainer", lightVars, "lightPrimaryContainer"),
  ...asRgbaVars("secondary", lightVars, "lightSecondary"),
  ...asRgbaVars("secondaryContainer", lightVars, "lightSecondaryContainer"),
  ...asRgbaVars("tertiary", lightVars, "lightTertiary"),
  ...asRgbaVars("tertiaryContainer", lightVars, "lightTertiaryContainer"),
  ...asRgbaVars("surface", lightVars, "lightSurface"),
  ...asRgbaVars("surfaceVariant", lightVars, "lightSurfaceVariant"),
  ...asRgbaVars("background", lightVars, "lightBackground"),
  ...asRgbaVars("error", lightVars, "lightError"),
  ...asRgbaVars("errorContainer", lightVars, "lightErrorContainer"),
  ...asRgbaVars("onPrimary", lightVars, "lightOnPrimary"),
  ...asRgbaVars("onPrimaryContainer", lightVars, "lightOnPrimaryContainer"),
  ...asRgbaVars("onSecondary", lightVars, "lightOnSecondary"),
  ...asRgbaVars("onSecondaryContainer", lightVars, "lightOnSecondaryContainer"),
  ...asRgbaVars("onTertiary", lightVars, "lightOnTertiary"),
  ...asRgbaVars("onTertiaryContainer", lightVars, "lightOnTertiaryContainer"),
  ...asRgbaVars("onSurface", lightVars, "lightOnSurface"),
  ...asRgbaVars("onSurfaceVariant", lightVars, "lightOnSurfaceVariant"),
  ...asRgbaVars("onError", lightVars, "lightOnError"),
  ...asRgbaVars("onErrorContainer", lightVars, "lightOnErrorContainer"),
  ...asRgbaVars("onBackground", lightVars, "lightOnBackground"),
  ...asRgbaVars("outline", lightVars, "lightOutline"),
  ...asRgbaVars("shadow", lightVars, "lightShadow"),
  ...asRgbaVars("surfaceTint", lightVars, "lightSurfaceTint"),
  ...asRgbaVars("inverseSurface", lightVars, "lightInverseSurface"),
  ...asRgbaVars("inverseOnSurface", lightVars, "lightInverseOnSurface"),
  ...asRgbaVars("inversePrimary", lightVars, "lightInversePrimary"),
};

const darkColorVars = {
  ...asRgbaVars("primary", darkVars, "darkPrimary"),
  ...asRgbaVars("primaryContainer", darkVars, "darkPrimaryContainer"),
  ...asRgbaVars("secondary", darkVars, "darkSecondary"),
  ...asRgbaVars("secondaryContainer", darkVars, "darkSecondaryContainer"),
  ...asRgbaVars("tertiary", darkVars, "darkTertiary"),
  ...asRgbaVars("tertiaryContainer", darkVars, "darkTertiaryContainer"),
  ...asRgbaVars("surface", darkVars, "darkSurface"),
  ...asRgbaVars("surfaceVariant", darkVars, "darkSurfaceVariant"),
  ...asRgbaVars("background", darkVars, "darkBackground"),
  ...asRgbaVars("error", darkVars, "darkError"),
  ...asRgbaVars("errorContainer", darkVars, "darkErrorContainer"),
  ...asRgbaVars("onPrimary", darkVars, "darkOnPrimary"),
  ...asRgbaVars("onPrimaryContainer", darkVars, "darkOnPrimaryContainer"),
  ...asRgbaVars("onSecondary", darkVars, "darkOnSecondary"),
  ...asRgbaVars("onSecondaryContainer", darkVars, "darkOnSecondaryContainer"),
  ...asRgbaVars("onTertiary", darkVars, "darkOnTertiary"),
  ...asRgbaVars("onTertiaryContainer", darkVars, "darkOnTertiaryContainer"),
  ...asRgbaVars("onSurface", darkVars, "darkOnSurface"),
  ...asRgbaVars("onSurfaceVariant", darkVars, "darkOnSurfaceVariant"),
  ...asRgbaVars("onError", darkVars, "darkOnError"),
  ...asRgbaVars("onErrorContainer", darkVars, "darkOnErrorContainer"),
  ...asRgbaVars("onBackground", darkVars, "darkOnBackground"),
  ...asRgbaVars("outline", darkVars, "darkOutline"),
  ...asRgbaVars("shadow", darkVars, "darkShadow"),
  ...asRgbaVars("surfaceTint", darkVars, "darkSurfaceTint"),
  ...asRgbaVars("inverseSurface", darkVars, "darkInverseSurface"),
  ...asRgbaVars("inverseOnSurface", darkVars, "darkInverseOnSurface"),
  ...asRgbaVars("inversePrimary", darkVars, "darkInversePrimary"),
};

globalStyle(":root", {
  vars: assignVars(colorVars, lightColorVars),
  "@media": {
    "(prefers-color-scheme: dark)": {
      vars: assignVars(colorVars, darkColorVars),
    },
  },
});

export const light = createTheme(colorVars, lightColorVars);
export const dark = createTheme(colorVars, darkColorVars);
