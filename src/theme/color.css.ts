import {
  assignVars,
  createThemeContract,
  globalStyle,
} from "@vanilla-extract/css";
import { asRGBA } from "./utils";

export const color = createThemeContract({
  primary: asRGBA(),
  primaryContainer: asRGBA(),
  secondary: asRGBA(),
  secondaryContainer: asRGBA(),
  tertiary: asRGBA(),
  tertiaryContainer: asRGBA(),
  surface: asRGBA(),
  surfaceVariant: asRGBA(),
  background: asRGBA(),
  error: asRGBA(),
  errorContainer: asRGBA(),
  onPrimary: asRGBA(),
  onPrimaryContainer: asRGBA(),
  onSecondary: asRGBA(),
  onSecondaryContainer: asRGBA(),
  onTertiary: asRGBA(),
  onTertiaryContainer: asRGBA(),
  onSurface: asRGBA(),
  onSurfaceVariant: asRGBA(),
  onError: asRGBA(),
  onErrorContainer: asRGBA(),
  onBackground: asRGBA(),
  outline: asRGBA(),
  shadow: asRGBA(),
  surfaceTint: asRGBA(),
  inverseSurface: asRGBA(),
  inverseOnSurface: asRGBA(),
  inversePrimary: asRGBA(),
});

export const colorTheme = createThemeContract({
  light: {
    primary: asRGBA(),
    primaryContainer: asRGBA(),
    secondary: asRGBA(),
    secondaryContainer: asRGBA(),
    tertiary: asRGBA(),
    tertiaryContainer: asRGBA(),
    surface: asRGBA(),
    surfaceVariant: asRGBA(),
    background: asRGBA(),
    error: asRGBA(),
    errorContainer: asRGBA(),
    onPrimary: asRGBA(),
    onPrimaryContainer: asRGBA(),
    onSecondary: asRGBA(),
    onSecondaryContainer: asRGBA(),
    onTertiary: asRGBA(),
    onTertiaryContainer: asRGBA(),
    onSurface: asRGBA(),
    onSurfaceVariant: asRGBA(),
    onError: asRGBA(),
    onErrorContainer: asRGBA(),
    onBackground: asRGBA(),
    outline: asRGBA(),
    shadow: asRGBA(),
    surfaceTint: asRGBA(),
    inverseSurface: asRGBA(),
    inverseOnSurface: asRGBA(),
    inversePrimary: asRGBA(),
  },
  dark: {
    primary: asRGBA(),
    primaryContainer: asRGBA(),
    secondary: asRGBA(),
    secondaryContainer: asRGBA(),
    tertiary: asRGBA(),
    tertiaryContainer: asRGBA(),
    surface: asRGBA(),
    surfaceVariant: asRGBA(),
    background: asRGBA(),
    error: asRGBA(),
    errorContainer: asRGBA(),
    onPrimary: asRGBA(),
    onPrimaryContainer: asRGBA(),
    onSecondary: asRGBA(),
    onSecondaryContainer: asRGBA(),
    onTertiary: asRGBA(),
    onTertiaryContainer: asRGBA(),
    onSurface: asRGBA(),
    onSurfaceVariant: asRGBA(),
    onError: asRGBA(),
    onErrorContainer: asRGBA(),
    onBackground: asRGBA(),
    outline: asRGBA(),
    shadow: asRGBA(),
    surfaceTint: asRGBA(),
    inverseSurface: asRGBA(),
    inverseOnSurface: asRGBA(),
    inversePrimary: asRGBA(),
  },
});

export const lightThemeVars = {
  primary: asRGBA(colorTheme.light.primary),
  primaryContainer: asRGBA(colorTheme.light.primaryContainer),
  secondary: asRGBA(colorTheme.light.secondary),
  secondaryContainer: asRGBA(colorTheme.light.secondaryContainer),
  tertiary: asRGBA(colorTheme.light.tertiary),
  tertiaryContainer: asRGBA(colorTheme.light.tertiaryContainer),
  surface: asRGBA(colorTheme.light.surface),
  surfaceVariant: asRGBA(colorTheme.light.surfaceVariant),
  background: asRGBA(colorTheme.light.background),
  error: asRGBA(colorTheme.light.error),
  errorContainer: asRGBA(colorTheme.light.errorContainer),
  onPrimary: asRGBA(colorTheme.light.onPrimary),
  onPrimaryContainer: asRGBA(colorTheme.light.onPrimaryContainer),
  onSecondary: asRGBA(colorTheme.light.onSecondary),
  onSecondaryContainer: asRGBA(colorTheme.light.onSecondaryContainer),
  onTertiary: asRGBA(colorTheme.light.onTertiary),
  onTertiaryContainer: asRGBA(colorTheme.light.onTertiaryContainer),
  onSurface: asRGBA(colorTheme.light.onSurface),
  onSurfaceVariant: asRGBA(colorTheme.light.onSurfaceVariant),
  onError: asRGBA(colorTheme.light.onError),
  onErrorContainer: asRGBA(colorTheme.light.onErrorContainer),
  onBackground: asRGBA(colorTheme.light.onBackground),
  outline: asRGBA(colorTheme.light.outline),
  shadow: asRGBA(colorTheme.light.shadow),
  surfaceTint: asRGBA(colorTheme.light.surfaceTint),
  inverseSurface: asRGBA(colorTheme.light.inverseSurface),
  inverseOnSurface: asRGBA(colorTheme.light.inverseOnSurface),
  inversePrimary: asRGBA(colorTheme.light.inversePrimary),
};

export const darkThemeVars = {
  primary: asRGBA(colorTheme.dark.primary),
  primaryContainer: asRGBA(colorTheme.dark.primaryContainer),
  secondary: asRGBA(colorTheme.dark.secondary),
  secondaryContainer: asRGBA(colorTheme.dark.secondaryContainer),
  tertiary: asRGBA(colorTheme.dark.tertiary),
  tertiaryContainer: asRGBA(colorTheme.dark.tertiaryContainer),
  surface: asRGBA(colorTheme.dark.surface),
  surfaceVariant: asRGBA(colorTheme.dark.surfaceVariant),
  background: asRGBA(colorTheme.dark.background),
  error: asRGBA(colorTheme.dark.error),
  errorContainer: asRGBA(colorTheme.dark.errorContainer),
  onPrimary: asRGBA(colorTheme.dark.onPrimary),
  onPrimaryContainer: asRGBA(colorTheme.dark.onPrimaryContainer),
  onSecondary: asRGBA(colorTheme.dark.onSecondary),
  onSecondaryContainer: asRGBA(colorTheme.dark.onSecondaryContainer),
  onTertiary: asRGBA(colorTheme.dark.onTertiary),
  onTertiaryContainer: asRGBA(colorTheme.dark.onTertiaryContainer),
  onSurface: asRGBA(colorTheme.dark.onSurface),
  onSurfaceVariant: asRGBA(colorTheme.dark.onSurfaceVariant),
  onError: asRGBA(colorTheme.dark.onError),
  onErrorContainer: asRGBA(colorTheme.dark.onErrorContainer),
  onBackground: asRGBA(colorTheme.dark.onBackground),
  outline: asRGBA(colorTheme.dark.outline),
  shadow: asRGBA(colorTheme.dark.shadow),
  surfaceTint: asRGBA(colorTheme.dark.surfaceTint),
  inverseSurface: asRGBA(colorTheme.dark.inverseSurface),
  inverseOnSurface: asRGBA(colorTheme.dark.inverseOnSurface),
  inversePrimary: asRGBA(colorTheme.dark.inversePrimary),
};

globalStyle(":root", {
  vars: {
    ...assignVars(color, lightThemeVars),
    ...assignVars(colorTheme, {
      light: {
        primary: asRGBA("#6750A4"),
        primaryContainer: asRGBA("#EADDFF"),
        secondary: asRGBA("#625B71"),
        secondaryContainer: asRGBA("#E8DEF8"),
        tertiary: asRGBA("#7D5260"),
        tertiaryContainer: asRGBA("#FFD8E4"),
        surface: asRGBA("#FFFBFE"),
        surfaceVariant: asRGBA("#E7E0EC"),
        background: asRGBA("#FFFBFE"),
        error: asRGBA("#B3261E"),
        errorContainer: asRGBA("#F9DEDC"),
        onPrimary: asRGBA("#FFFFFF"),
        onPrimaryContainer: asRGBA("#21005E"),
        onSecondary: asRGBA("#FFFFFF"),
        onSecondaryContainer: asRGBA("#1E192B"),
        onTertiary: asRGBA("#FFFFFF"),
        onTertiaryContainer: asRGBA("#370B1E"),
        onSurface: asRGBA("#1C1B1F"),
        onSurfaceVariant: asRGBA("#49454E"),
        onError: asRGBA("#FFFFFF"),
        onErrorContainer: asRGBA("#370B1E"),
        onBackground: asRGBA("#1C1B1F"),
        outline: asRGBA("#79747E"),
        shadow: asRGBA("#000000"),
        surfaceTint: asRGBA("#6750A4"),
        inverseSurface: asRGBA(colorTheme.light.primary),
        inverseOnSurface: asRGBA("#F4EFF4"),
        inversePrimary: asRGBA("#D0BCFF"),
      },
      dark: {
        primary: asRGBA("#D0BCFF"),
        primaryContainer: asRGBA("#4F378B"),
        secondary: asRGBA("#CCC2DC"),
        secondaryContainer: asRGBA("#4A4458"),
        tertiary: asRGBA("#EFB8C8"),
        tertiaryContainer: asRGBA("#633B48"),
        surface: asRGBA("#1C1B1F"),
        surfaceVariant: asRGBA("#49454F"),
        background: asRGBA("#1C1B1F"),
        error: asRGBA("#F2B8B5"),
        errorContainer: asRGBA("#8C1D18"),
        onPrimary: asRGBA("#371E73"),
        onPrimaryContainer: asRGBA("#EADDFF"),
        onSecondary: asRGBA("#332D41"),
        onSecondaryContainer: asRGBA("#E8DEF8"),
        onTertiary: asRGBA("#492532"),
        onTertiaryContainer: asRGBA("#FFD8E4"),
        onSurface: asRGBA("#E6E1E5"),
        onSurfaceVariant: asRGBA("#CAC4D0"),
        onError: asRGBA("#601410"),
        onErrorContainer: asRGBA("#F9DEDC"),
        onBackground: asRGBA("#E6E1E5"),
        outline: asRGBA("#938F99"),
        shadow: asRGBA("#000000"),
        surfaceTint: asRGBA(colorTheme.dark.primary),
        inverseSurface: asRGBA("#E6E1E5"),
        inverseOnSurface: asRGBA("#313033"),
        inversePrimary: asRGBA("#6750A4"),
      },
    }),
  },
  "@media": {
    "(prefers-color-scheme: dark)": {
      vars: assignVars(color, darkThemeVars),
    },
  },
});
